kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongo-storage-claim
  labels:
    app: mongo-storage-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      name: mongo
      labels: 
        app: mongo
    spec:
      containers:
      - image: mongo:4.0
        imagePullPolicy: "Always"
        name: mongo
        ports:
        - containerPort: 27017
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 6
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            memory: "128M"
            cpu: 0.2
          limits:
            memory: "512M"
            cpu: 0.5
        volumeMounts:
          - name: mongo-storage
            mountPath: /data/db
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-storage-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
      name: api
    spec:
      containers:
      - env:
        - name: MONGODB_DATABASE
          value: sorry-cypress
        - name: MONGODB_URI
          value: mongodb://mongo-service:27017
        image: agoldis/sorry-cypress-api:latest
        imagePullPolicy: "Always"
        name: api
        ports:
        - containerPort: 4000
        resources:
          requests:
            memory: "128M"
            cpu: 0.2
          limits:
            memory: "512M"
            cpu: 0.5
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: director
spec:
  replicas: 1
  selector:
    matchLabels:
      app: director
  template:
    metadata:
      labels:
        app: director
      name: director
    spec:
      containers:
      - env:
        - name: DASHBOARD_URL
          value: [YOUR-DASHBOARD-URL-HERE]
        - name: EXECUTION_DRIVER
          value: ../execution/mongo/driver
        - name: MONGODB_DATABASE
          value: sorry-cypress
        - name: MONGODB_URI
          value: mongodb://mongo-service:27017
        - name: SCREENSHOTS_DRIVER
          value: ../screenshots/s3.driver
        - name: S3_BUCKET
          value: sendible-cypress
        - name: S3_REGION
          value: us-east-1
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
              secretKeyRef:
                name: cypress-s3-secrets
                key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
              secretKeyRef:
                name: cypress-s3-secrets
                key: AWS_SECRET_ACCESS_KEY
        image: agoldis/sorry-cypress-director:latest
        imagePullPolicy: "Always"
        name: director
        ports:
        - containerPort: 1234
        readinessProbe:
          httpGet:
            path: /
            port: 1234
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        resources:
          requests:
            memory: "128M"
            cpu: 0.2
          limits:
            memory: "512M"
            cpu: 0.5
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      labels:
        app: dashboard
      name: dashboard
    spec:
      containers:
      - env:
        - name: GRAPHQL_SCHEMA_URL
          value: [YOUR-API-URL-HERE]
        image: agoldis/sorry-cypress-dashboard:latest
        imagePullPolicy: "Always"
        name: dashboard
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        resources:
          requests:
            memory: "128M"
            cpu: 0.2
          limits:
            memory: "512M"
            cpu: 0.5
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    app: dashboard
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  ports:
  - name: "4000"
    port: 4000
    targetPort: 4000
  selector:
    app: api
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
  selector:
    app: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: director-service
spec:
  ports:
  - name: "1234"
    port: 1234
    targetPort: 1234
  selector:
    app: director
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cypress-ingresses
spec:
  rules:
  - host: [YOUR-DASHBOARD-URL-HERE]
    http:
      paths:
      - backend:
          serviceName: dashboard-service
          servicePort: 8080
  - host: [YOUR-API-URL-HERE]
    http:
      paths:
      - backend:
          serviceName: api-service
          servicePort: 4000
  - host: [YOUR-DIRECTOR-URL-HERE]
    http:
      paths:
      - backend:
          serviceName: director-service
          servicePort: 1234
---
apiVersion: v1
kind: Secret
metadata:
  name: cypress-s3-secrets
data:
  # Insert your appropriate secrets, base64-encoded.
  # In a terminal, type: echo -n YOUR-TEXT-TO-ENCODE | base64
  AWS_SECRET_ACCESS_KEY: [INSERT-HERE]
  AWS_ACCESS_KEY_ID: [INSERT-HERE]